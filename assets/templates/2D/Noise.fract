{"compilers":[{"isCurrent":true,"languageName":"HLSL","shaderName":"NewShader","source":"//It is possible to redefine float as double for better precision\n//(performance will be decreased significantly)\n//#define float2 double2\n//#define float double\n\n//define parameters\nstruct Parameters \n{\n    //custom parameters:\n    float frequency;\n    int octaves;\n    float deltaAngle;\n    float lacunarity;\n    float grain;\n    \n\n\t//space transform:\n    float2 move; \n   \tfloat zoom;\n   \tfloat rotation;\n    \n    //preview parameters:\n    bool showUVRect;\n    bool showSpaceMesh;\n    float previewScale;\n\n    //reserved parameters,autoupdated by app:\n    float2 extent;//render area extent in pixels\n\tfloat2 mouse_pos;//current mouse position in pixels\n\tfloat2 mouse_delta;//mouse delta for the last frame in pixels\n\tfloat mouse_wheel_delta;//mouse wheel delta for the last frame\n\tbool lmb_down;//if left mouse button down\n\tbool rmb_down;//if right mouse button down\n\tbool mmb_down;//if middle mouse button down\n\tfloat t;//time counter\n\tfloat dt;//time passed from last frame\n};\n\n//define parameters variable p\nInputParameters(Parameters,p);\n\n\n\nfloat random (float2 st)\n{\n    return frac(sin(dot(st.xy,\n                         float2(12.9898,78.233)))\n                 * 43758.5453123);\n}\n\n\nfloat noise(float2 uv)\n{\n    int2 p=floor(uv);\n    float2 f=frac(uv);\n    f= f*f*(3.0-2.0*f);\n\n    float r=random(p);\n    float rx=random(p+int2(1,0));\n    float ry=random(p+int2(0,1));\n    float rxy=random(p+int2(1,1));\n\n\n    float res=lerp(lerp(r,rx,f.x), lerp(ry,rxy,f.x),f.y);\n    return res;\n}\n\nfloat fbm(float2 st)\n{\n\tfloat val=0;\n\tfloat2 amplitude=0.5;\n\tfloat2 freq=1;\n\tfor(int i=0;i<p.octaves;++i)\n\t{\n\t\tfloat2x2 r=float2x2(cos(p.deltaAngle),sin(p.deltaAngle),\n\t\t-sin(p.deltaAngle),cos(p.deltaAngle));\n\t\tst=r*st;\n\t\tval+=noise(st*freq+p.t)*amplitude;\n\t\tfreq*=p.lacunarity;\n\t\tamplitude*=p.grain;\n\t}\n\treturn val;\n}\n\nfloat2 uvToSpacePoint(float2 uv)\n{\n\tfloat2x2 rot=float2x2(cos(p.rotation),sin(p.rotation),-sin(p.rotation),cos(p.rotation));\n\treturn rot*(uv / p.zoom +p.move);\n}\n\nfloat2 spacePointToUv(float2 spacePoint)\n{\n\tfloat2x2 rot=float2x2(cos(p.rotation),sin(p.rotation),-sin(p.rotation),cos(p.rotation));\n\treturn  (transpose(rot)*spacePoint-p.move)*p.zoom;\n}\n\n//This function will be the result of export\n//Pass parameters through function arguments for dynamic parameters\nfloat4 output(float2 uv)\n{\n\tfloat2 pos = uvToSpacePoint(uv);\n\n\treturn fbm(pos*p.frequency);\n   \t//return float4( fbm(pos*p.frequency), fbm((pos+40)*p.frequency), fbm((pos-100)*p.frequency) , 1);\n}\n\nfloat2 screenToUV(float2 screenPosition)\n{\n\tscreenPosition.y=-screenPosition.y;\n\tfloat2 identitySquare;\n\tif(p.extent.x>p.extent.y)\n\t\tidentitySquare=float2(p.extent.y/p.extent.x,1);\n    else\n        identitySquare=float2(1,p.extent.x/p.extent.y);\n\treturn (screenPosition+identitySquare*p.previewScale*0.5)/identitySquare/p.previewScale;\n}\n\n//Function is called for each pixel\n//and returns color for this pixel\n//you can use it to preview output function\n//this does not affect the export result\nfloat4 main(float4 position) : SV_TARGET\n{\n\tfloat2 positionT=screenToUV(position);\n\t\n\t\n\tif(p.showUVRect)\n\t{\n\t    float w=0.005/p.previewScale;\n\t    float2 fr= frac(positionT);\n\t    if(step(-w,fr.y)-step(w,fr.y)+step(-w,fr.x)-step(w,fr.x))\n\t    \treturn 1-output(positionT);\n\t}\n\tif(p.showSpaceMesh)\n\t{\n\t    float w=0.005/p.previewScale;\n\t    float2 fr= frac(uvToSpacePoint(positionT));\n\t    if(step(-w,fr.y)-step(w,fr.y)+step(-w,fr.x)-step(w,fr.x))\n\t    \treturn float4(0.5,0.5,1,1);\n\t}\n\t\n   \treturn output(positionT);\n}\n\n\n//this function called only once per frame before main\n//Allows to control parameters in one place\nvoid UpdateParameters(inout Parameters p) \n{\n\t//scale with mouse wheel\n\tif(!isKeyDown(KEY_Shift)&&!isKeyDown(KEY_Alt))\n\t{\n\t    float2 mouseBeforeZoom=screenToUV(p.mouse_pos/p.extent*2-1);\n\t    float zoomScale=exp(p.mouse_wheel_delta*0.1);\n\t    float2 mouseAfterZoom=mouseBeforeZoom*zoomScale;\n\t    p.zoom*=zoomScale;\n\t    p.move-=(mouseBeforeZoom-mouseAfterZoom)/p.zoom;\n     }\n     else if(isKeyDown(KEY_Alt))//rotate with Alt and mouse wheel\n     {\n     \tfloat delta=p.mouse_wheel_delta*0.1;\n     \tp.rotation+=delta;\n     \tfloat2x2 rot=float2x2(cos(delta),sin(delta),-sin(delta),cos(delta));\n     \tp.move=p.move*rot;\n     }\n     \n\t//movement with mouse\n\tif(p.lmb_down)\n\t\tp.move-=float2(p.mouse_delta.x,-p.mouse_delta.y)/p.extent.y/p.zoom*2/p.previewScale;\n\n\t//scale and move with keyboard\n\tfloat scaleUpdate=exp((isKeyDown(KEY_E)-isKeyDown(KEY_Q) )*p.dt);\n\tp.zoom=p.zoom*scaleUpdate;\n\tp.move-=(0.5-0.5*scaleUpdate)/p.zoom;\n\n\tfloat2 move_delta=float2(isKeyDown(KEY_D)-isKeyDown(KEY_A),isKeyDown(KEY_W)-isKeyDown(KEY_S));\n\tp.move+=move_delta*p.dt/p.zoom;\n\n\t//preview parameters control\n\tif(isKeyPressed(KEY_1))\n\t\tp.showUVRect=!p.showUVRect;\n\tif(isKeyPressed(KEY_2))\n\t\tp.showSpaceMesh=!p.showSpaceMesh;\n\tif(isKeyDown(KEY_Shift))\n\t\tp.previewScale*=exp(p.mouse_wheel_delta*0.1);\n\n\t//limit parameters\n\tif(p.zoom<=0)\n\t\tp.zoom=0.1;\n}\n\n\n"}],"name":"Noise","parameters":{"members":{"deltaAngle":{"data":[31,-123,-93,-64],"metadata":null,"name":"deltaAngle","offset":8,"type":"float"},"dt":{"data":[-12,78,5,60],"metadata":null,"name":"dt","offset":92,"type":"float"},"extent":{"data":[0,0,32,69,0,0,-76,68],"metadata":null,"name":"extent","offset":48,"type":"vec2"},"frequency":{"data":[0,0,-128,63],"metadata":null,"name":"frequency","offset":0,"type":"float"},"grain":{"data":[0,0,0,63],"metadata":null,"name":"grain","offset":16,"type":"float"},"lacunarity":{"data":[-82,71,-63,63],"metadata":null,"name":"lacunarity","offset":12,"type":"float"},"lmb_down":{"data":[0,0,0,0],"metadata":null,"name":"lmb_down","offset":76,"type":"uint"},"mmb_down":{"data":[0,0,0,0],"metadata":null,"name":"mmb_down","offset":84,"type":"uint"},"mouse_delta":{"data":[0,0,0,-64,0,0,0,0],"metadata":null,"name":"mouse_delta","offset":64,"type":"vec2"},"mouse_pos":{"data":[0,96,-74,68,0,0,-126,66],"metadata":null,"name":"mouse_pos","offset":56,"type":"vec2"},"mouse_wheel_delta":{"data":[0,0,0,0],"metadata":null,"name":"mouse_wheel_delta","offset":72,"type":"float"},"move":{"data":[-27,34,-8,66,-110,51,88,66],"metadata":null,"name":"move","offset":20,"type":"vec2"},"octaves":{"data":[20,0,0,0],"metadata":null,"name":"octaves","offset":4,"type":"int"},"previewScale":{"data":[-54,-52,-52,63],"metadata":null,"name":"previewScale","offset":44,"type":"float"},"rmb_down":{"data":[0,0,0,0],"metadata":null,"name":"rmb_down","offset":80,"type":"uint"},"rotation":{"data":[0,0,-128,50],"metadata":null,"name":"rotation","offset":32,"type":"float"},"showSpaceMesh":{"data":[0,0,0,0],"metadata":null,"name":"showSpaceMesh","offset":40,"type":"uint"},"showUVRect":{"data":[0,0,0,0],"metadata":null,"name":"showUVRect","offset":36,"type":"uint"},"t":{"data":[55,66,2,69],"metadata":null,"name":"t","offset":88,"type":"float"},"zoom":{"data":[-83,-51,34,61],"metadata":null,"name":"zoom","offset":28,"type":"float"}},"size":96}}