{"cache":[0,2,0,0,0,2,0,0,103,101,110,101,114,97,116,101,100,40,117,118,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11],"compilers":[{"isCurrent":true,"languageName":"HLSL","shaderName":"2D","source":"//CONTROLS:\n/*\nView:\nLMB+Mouse - grab and move\nW,S,A,D - movement\nQ,E,mouse wheel - zoom\n1 - show output square\n2 - show coordinate grid\nShift+mouse wheel - scale output square\nAlt+mouse wheel - rotate\n*/\n\n//It is possible to redefine float as double for better precision\n//(performance will be decreased significantly)\n//#define float2 double2\n//#define float double\n\n//define parameters\nstruct Parameters \n{\n    //custom parameters:\n    float a;\n\n\t//space transform:\n    float2 move; \n   \tfloat zoom;\n   \tfloat rotation;\n    \n    //preview parameters:\n    bool showUVRect;\n    bool showSpaceMesh;\n    float previewScale;\n\n    //reserved parameters,autoupdated by app:\n    float2 extent;//render area extent in pixels\n\tfloat2 mouse_pos;//current mouse position in pixels\n\tfloat2 mouse_delta;//mouse delta for the last frame in pixels\n\tfloat mouse_wheel_delta;//mouse wheel delta for the last frame\n\tbool lmb_down;//if left mouse button down\n\tbool rmb_down;//if right mouse button down\n\tbool mmb_down;//if middle mouse button down\n\tfloat t;//time counter\n\tfloat dt;//time passed from last frame\n};\n\n//define parameters variable p\nInputParameters(Parameters,p);\n\nfloat2 uvToSpacePoint(float2 uv)\n{\n\tfloat2x2 rot=float2x2(cos(p.rotation),sin(p.rotation),-sin(p.rotation),cos(p.rotation));\n\treturn rot*(uv / p.zoom +p.move);\n}\n\nfloat2 spacePointToUv(float2 spacePoint)\n{\n\tfloat2x2 rot=float2x2(cos(p.rotation),sin(p.rotation),-sin(p.rotation),cos(p.rotation));\n\treturn  (transpose(rot)*spacePoint-p.move)*p.zoom;\n}\n\n//This function will be the result of export\n//Pass parameters through function arguments for dynamic parameters\nfloat4 output(float2 uv)\n{\n\tfloat2 pos = uvToSpacePoint(uv);\n\n   \treturn pos.x*pos.y;\n}\n\nfloat2 screenToUV(float2 screenPosition)\n{\n\tscreenPosition.y=-screenPosition.y;\n\tfloat2 identitySquare;\n\tif(p.extent.x>p.extent.y)\n\t\tidentitySquare=float2(p.extent.y/p.extent.x,1);\n    else\n        identitySquare=float2(1,p.extent.x/p.extent.y);\n\treturn (screenPosition+identitySquare*p.previewScale*0.5)/identitySquare/p.previewScale;\n}\n\n//Function is called for each pixel\n//and returns color for this pixel\n//you can use it to preview output function\n//this does not affect the export result\nfloat4 main(float2 position)\n{\n\tfloat2 positionT = screenToUV(position);\n\t\n\tfloat4 result = output(positionT);\n\t\n\tif(p.showUVRect)\n\t{\n\t    float w=0.005/p.previewScale;\n\t    float2 fr= frac(positionT);\n\t    if(step(-w,fr.y)-step(w,fr.y)+step(-w,fr.x)-step(w,fr.x))\n\t    \treturn 1-result;\n\t}\n\t\n\tif(p.showSpaceMesh)\n\t{\n\t    float w=0.005/p.previewScale;\n\t    float2 fr= frac(uvToSpacePoint(positionT));\n\t    if(step(-w,fr.y)-step(w,fr.y)+step(-w,fr.x)-step(w,fr.x))\n\t    \treturn float4(0.5,0.5,1,1);\n\t}\n\t\n   \treturn result;\n}\n\n\n//this function called only once per frame before main\n//Allows to control parameters in one place\nvoid UpdateParameters(inout Parameters p) \n{\n    //scale with mouse wheel\n    if(!isKeyDown(KEY_LeftShift)&&!isKeyDown(KEY_LeftAlt))\n    {\n        float2 mouseBeforeZoom=screenToUV(p.mouse_pos/p.extent*2-1);\n        float zoomScale=exp(p.mouse_wheel_delta*0.1);\n        float2 mouseAfterZoom=mouseBeforeZoom*zoomScale;\n        p.zoom*=zoomScale;\n        p.move-=(mouseBeforeZoom-mouseAfterZoom)/p.zoom;\n     }\n     else if(isKeyDown(KEY_LeftAlt))//rotate with Alt and mouse wheel\n     {\n         float delta=p.mouse_wheel_delta*0.1*radians(30);\n         p.rotation+=delta;\n         float2x2 rot=float2x2(cos(delta),sin(delta),-sin(delta),cos(delta));\n         p.move=p.move*rot;\n     }\n     \n    //movement with mouse\n    if(p.lmb_down)\n        p.move-=float2(p.mouse_delta.x,-p.mouse_delta.y)/p.extent.y/p.zoom*2/p.previewScale;\n\n    //scale and move with keyboard\n    float scaleUpdate=exp((isKeyDown(KEY_E)-isKeyDown(KEY_Q) )*p.dt);\n    p.zoom=p.zoom*scaleUpdate;\n    p.move-=(0.5-0.5*scaleUpdate)/p.zoom;\n\n    float2 move_delta=float2(isKeyDown(KEY_D)-isKeyDown(KEY_A),isKeyDown(KEY_W)-isKeyDown(KEY_S));\n    p.move+=move_delta*p.dt/p.zoom;\n\n    //preview parameters control\n    if(isKeyPressed(KEY_1))\n        p.showUVRect=!p.showUVRect;\n    if(isKeyPressed(KEY_2))\n        p.showSpaceMesh=!p.showSpaceMesh;\n    if(isKeyDown(KEY_LeftShift))\n        p.previewScale*=exp(p.mouse_wheel_delta*0.1);\n\n    //limit parameters\n    if(p.zoom<=0)\n        p.zoom=0.1;\n}\n\n"}],"name":"2D","parameters":{"members":{"a":{"data":[0,0,0,0],"metadata":null,"name":"a","offset":0,"type":"float"},"dt":{"data":[124,115,-55,59],"metadata":null,"name":"dt","offset":76,"type":"float"},"extent":{"data":[0,0,32,69,0,32,-85,68],"metadata":null,"name":"extent","offset":32,"type":"vec2"},"lmb_down":{"data":[0,0,0,0],"metadata":null,"name":"lmb_down","offset":60,"type":"uint"},"mmb_down":{"data":[0,0,0,0],"metadata":null,"name":"mmb_down","offset":68,"type":"uint"},"mouse_delta":{"data":[0,0,0,0,0,0,0,0],"metadata":null,"name":"mouse_delta","offset":48,"type":"vec2"},"mouse_pos":{"data":[-1,-1,127,-1,-1,-1,127,-1],"metadata":null,"name":"mouse_pos","offset":40,"type":"vec2"},"mouse_wheel_delta":{"data":[0,0,0,0],"metadata":null,"name":"mouse_wheel_delta","offset":56,"type":"float"},"move":{"data":[115,45,-74,-65,-104,-2,-115,-65],"metadata":null,"name":"move","offset":4,"type":"vec2"},"previewScale":{"data":[-121,79,-71,63],"metadata":null,"name":"previewScale","offset":28,"type":"float"},"rmb_down":{"data":[0,0,0,0],"metadata":null,"name":"rmb_down","offset":64,"type":"uint"},"rotation":{"data":[0,0,-128,50],"metadata":null,"name":"rotation","offset":16,"type":"float"},"showSpaceMesh":{"data":[1,0,0,0],"metadata":null,"name":"showSpaceMesh","offset":24,"type":"uint"},"showUVRect":{"data":[0,0,0,0],"metadata":null,"name":"showUVRect","offset":20,"type":"uint"},"t":{"data":[-44,114,-98,70],"metadata":null,"name":"t","offset":72,"type":"float"},"zoom":{"data":[95,14,-26,62],"metadata":null,"name":"zoom","offset":12,"type":"float"}},"size":80}}