{"cache":[0,2,0,0,0,2,0,0,103,101,110,101,114,97,116,101,100,40,117,118,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,61,-44],"compilers":[{"isCurrent":true,"languageName":"HLSL","shaderName":"MandelbrotTemplate","source":"//CONTROLS:\n/*\nView:\nLMB+Mouse - grab and move\nW,S,A,D - movement\nQ,E,mouse wheel - zoom\n1 - show output square\n2 - show coordinate grid\nShift+mouse wheel - scale output square\nAlt+mouse wheel - rotate\n\n\nFractal:\nF - swith mode(Mandelbrot/Julia)\nUp,Down - accuracy\nLeft,right - contrast\nRBM - set Julia constant\nUp,Down - accuracy\n*/\n\n\n\n\n//It is possible to redefine float as double for better precision\n//(performance will be decreased significantly)\n//#define float2 double2\n//#define float double\n\n//define parameters\nstruct Parameters \n{\n    //space transform:\n    float2 move; \n    float zoom;\n    float rotation;\n    \n    //preview parameters:\n    bool showUVRect;\n    bool showSpaceMesh;\n    float previewScale;\n    \n    //fractal parameters:\n    float accuracy;\n    float contrast;\n    bool removeBanding;\n    int mode;//Mandelbrot or Julian (add current point or add constant)\n    float2 c;//Julian constant\n    float4 julia_color;\n    float4 mandelbrot_color;\n    \n \n    //reserved parameters,autoupdated by app:\n    float2 extent;//render area extent in pixels\n    float2 mouse_pos;//current mouse position in pixels\n    float2 mouse_delta;//mouse delta for the last frame in pixels\n    float mouse_wheel_delta;//mouse wheel delta for the last frame\n    bool lmb_down;//if left mouse button down\n    bool rmb_down;//if right mouse button down\n    bool mmb_down;//if middle mouse button down\n    float t;//time counter\n    float dt;//time passed from last frame\n};\n\nfloat4 colored(float val)\n{\n\tfloat cycle = 1;\n\tfloat4 colors[]={\n\tfloat4(0,0,0,1),\n\tfloat4(1,0,0,0.5),\n\tfloat4(1,1,1,1),\n\t};\n\t\n\tval=(val%cycle)/cycle;\n\tfor(int i=1;i<3;++i)\n\t{\n\t\tif(val<colors[i].a)\n\t\t\treturn float4(lerp(colors[i-1].xyz,colors[i].xyz, (val-colors[i-1].a)/(colors[i].a-colors[i-1].a)),1);\n\t}\n\t\n\t\n\treturn 0;\n}\n\n//define parameters variable p\nInputParameters(Parameters,p);\n\nfloat fractal(float2 x, float2 c)\n{\n    int i=0;\n    float2 z=x;\n    while(((z.x*z.x+z.y*z.y)<20)&&i<=p.accuracy)\n    {\n        z= float2(z.x * z.x - z.y * z.y, 2 * z.x * z.y)+c;\n        ++i;\n    }\n    if(i>=p.accuracy)\n        return 1;\n        \n    float val=i;\n    if(p.removeBanding)\n        val=clamp(val-log(log(length(z)))/log(2)+1,0,p.accuracy);\n    return pow(val/p.accuracy,p.contrast);\n}\n\nfloat2 uvToSpacePoint(float2 uv)\n{\n    float2x2 rot=float2x2(cos(p.rotation),sin(p.rotation),-sin(p.rotation),cos(p.rotation));\n    return rot*(uv / p.zoom +p.move);\n}\n\nfloat2 spacePointToUv(float2 spacePoint)\n{\n    float2x2 rot=float2x2(cos(p.rotation),sin(p.rotation),-sin(p.rotation),cos(p.rotation));\n    return  (transpose(rot)*spacePoint-p.move)*p.zoom;\n}\n\n//This function will be the result of export\n//Pass parameters through function arguments for dynamic parameters\nfloat4 output(float2 uv)\n{\n    float2 pos = uvToSpacePoint(uv);\n    \n    float4 result=0;\n    if(p.mode!=0)\n           result+= fractal(pos,p.c)*p.julia_color;\n    if(p.mode!=2)\n            result+= fractal(pos,pos)*p.mandelbrot_color;\n    return result;\n}\n\nfloat2 screenToUV(float2 screenPosition)\n{\n    screenPosition.y=-screenPosition.y;\n    float2 identitySquare;\n    if(p.extent.x>p.extent.y)\n        identitySquare=float2(p.extent.y/p.extent.x,1);\n    else\n        identitySquare=float2(1,p.extent.x/p.extent.y);\n    return (screenPosition+identitySquare*p.previewScale*0.5)/identitySquare/p.previewScale;\n}\n\n\n\n\n//Function is called for each pixel\n//and returns color for this pixel\n//you can use it to preview output function\n//this does not affect the export result\nfloat4 main(float4 position) : SV_TARGET\n{\n    float2 positionT=screenToUV(position);\n        \n    if (length(positionT-spacePointToUv(p.c))*p.previewScale<0.01)\n        return float4(1,0,0,1);\n    \n    if(p.showUVRect)\n    {\n        float w=0.005/p.previewScale;\n        float2 fr= frac(positionT);\n        if(step(-w,fr.y)-step(w,fr.y)+step(-w,fr.x)-step(w,fr.x))\n            return 1-output(positionT);\n    }\n    if(p.showSpaceMesh)\n    {\n        float w=0.005/p.previewScale;\n        float2 fr= frac(uvToSpacePoint(positionT));\n        if(step(-w,fr.y)-step(w,fr.y)+step(-w,fr.x)-step(w,fr.x))\n            return float4(0.5,0.5,1,1);\n    }\n    \n       return output(positionT);\n}\n\n\nfloat precisionAtPoint(float2 pos)\n{\n\treturn 0;\n}\n\n//this function called only once per frame before main\n//Allows to control parameters in one place\nvoid UpdateParameters(inout Parameters p) \n{\n    //scale with mouse wheel\n    if(!isKeyDown(KEY_LeftShift)&&!isKeyDown(KEY_LeftAlt))\n    {\n        float2 mouseBeforeZoom=screenToUV(p.mouse_pos/p.extent*2-1);\n        float zoomScale=exp(p.mouse_wheel_delta*0.1);\n        float2 mouseAfterZoom=mouseBeforeZoom*zoomScale;\n        p.zoom*=zoomScale;\n        p.move-=(mouseBeforeZoom-mouseAfterZoom)/p.zoom;\n     }\n     else if(isKeyDown(KEY_LeftAlt))//rotate with Alt and mouse wheel\n     {\n         float delta=p.mouse_wheel_delta*0.1*radians(30);\n         p.rotation+=delta;\n         float2x2 rot=float2x2(cos(delta),sin(delta),-sin(delta),cos(delta));\n         p.move=p.move*rot;\n     }\n     \n    //movement with mouse\n    if(p.lmb_down)\n        p.move-=float2(p.mouse_delta.x,-p.mouse_delta.y)/p.extent.y/p.zoom*2/p.previewScale;\n\n    //scale and move with keyboard\n    float scaleUpdate=exp((isKeyDown(KEY_E)-isKeyDown(KEY_Q) )*p.dt);\n    p.zoom=p.zoom*scaleUpdate;\n    p.move-=(0.5-0.5*scaleUpdate)/p.zoom;\n\n    float2 move_delta=float2(isKeyDown(KEY_D)-isKeyDown(KEY_A),isKeyDown(KEY_W)-isKeyDown(KEY_S));\n    p.move+=move_delta*p.dt/p.zoom;\n\n    //preview parameters control\n    if(isKeyPressed(KEY_1))\n        p.showUVRect=!p.showUVRect;\n    if(isKeyPressed(KEY_2))\n        p.showSpaceMesh=!p.showSpaceMesh;\n    if(isKeyDown(KEY_LeftShift))\n        p.previewScale*=exp(p.mouse_wheel_delta*0.1);\n\n    //limit parameters\n    if(p.zoom<=0)\n        p.zoom=0.1;\n        \n    //fractal parameters\n    p.accuracy*=exp((isKeyDown(KEY_UpArrow)-isKeyDown(KEY_DownArrow))*p.dt);\n    p.contrast*=exp((isKeyDown(KEY_RightArrow)-isKeyDown(KEY_LeftArrow))*p.dt*5);\n    p.mode=(p.mode+(isKeyPressed(KEY_F)||isKeyReleased(KEY_F)))%4;\n    //c point\n    if(p.rmb_down)\n        p.c=uvToSpacePoint(screenToUV(p.mouse_pos/p.extent*2-1));\n}\n\n"}],"name":"MandelbrotTemplate","parameters":{"members":{"accuracy":{"data":[-5,-51,-20,65],"metadata":null,"name":"accuracy","offset":28,"type":"float"},"c":{"data":[-115,118,-70,62,-118,-69,31,63,0,0,0,0,0,0,0,0],"metadata":null,"name":"c","offset":48,"type":"vec2"},"contrast":{"data":[0,0,-128,63],"metadata":null,"name":"contrast","offset":32,"type":"float"},"dt":{"data":[27,-107,-27,59],"metadata":null,"name":"dt","offset":140,"type":"float"},"extent":{"data":[0,0,32,69,0,32,-85,68],"metadata":null,"name":"extent","offset":96,"type":"vec2"},"julia_color":{"data":[-87,-88,40,62,0,0,0,0,0,0,-128,63,0,0,-128,63],"metadata":null,"name":"julia_color","offset":64,"type":"vec4"},"lmb_down":{"data":[0,0,0,0],"metadata":null,"name":"lmb_down","offset":124,"type":"uint"},"mandelbrot_color":{"data":[0,0,0,0,0,0,-128,63,-127,-128,0,60,0,0,-128,63],"metadata":null,"name":"mandelbrot_color","offset":80,"type":"vec4"},"mmb_down":{"data":[0,0,0,0],"metadata":null,"name":"mmb_down","offset":132,"type":"uint"},"mode":{"data":[0,0,0,0,0,0,0,0],"metadata":null,"name":"mode","offset":40,"type":"int"},"mouse_delta":{"data":[0,0,-64,-64,0,0,0,-64],"metadata":null,"name":"mouse_delta","offset":112,"type":"vec2"},"mouse_pos":{"data":[0,0,46,68,0,0,-104,66],"metadata":null,"name":"mouse_pos","offset":104,"type":"vec2"},"mouse_wheel_delta":{"data":[0,0,0,0],"metadata":null,"name":"mouse_wheel_delta","offset":120,"type":"float"},"move":{"data":[-111,81,34,-64,-108,-41,-23,-65],"metadata":null,"name":"move","offset":0,"type":"vec2"},"previewScale":{"data":[-47,110,-65,63],"metadata":null,"name":"previewScale","offset":24,"type":"float"},"removeBanding":{"data":[0,0,0,0],"metadata":null,"name":"removeBanding","offset":36,"type":"uint"},"rmb_down":{"data":[0,0,0,0],"metadata":null,"name":"rmb_down","offset":128,"type":"uint"},"rotation":{"data":[0,0,0,0],"metadata":null,"name":"rotation","offset":12,"type":"float"},"showSpaceMesh":{"data":[0,0,0,0],"metadata":null,"name":"showSpaceMesh","offset":20,"type":"uint"},"showUVRect":{"data":[0,0,0,0],"metadata":null,"name":"showUVRect","offset":16,"type":"uint"},"t":{"data":[-24,-24,-112,67],"metadata":null,"name":"t","offset":136,"type":"float"},"zoom":{"data":[41,-25,-109,62],"metadata":null,"name":"zoom","offset":8,"type":"float"}},"size":144}}