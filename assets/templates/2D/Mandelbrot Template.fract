{"cache":[0,2,0,0,0,2,0,0,103,101,110,101,114,97,116,101,100,40,117,118,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,61,-44],"compilers":[{"isCurrent":true,"languageName":"HLSL","shaderName":"MandelbrotTemplate","source":"//It is possible to redefine float as double for better precision\n//(performance will be decreased significantly)\n//#define float2 double2\n//#define float double\n\n//define parameters\nstruct Parameters \n{\n\t//space transform:\n    float2 move; \n   \tfloat zoom;\n   \tfloat rotation;\n\n\t//mandelbrot-like fractal specific parameters:\n\tfloat accuracy; \n    int mode;//Mandelbrot or Julian (add current point or add constant)\n    float2 c;//Julian constant\n    float contrast;\n    float radius;\n    float k;\n    float4 color;\n    bool removeBanding;\n\n    \n    //preview parameters:\n    bool showUVRect;\n    bool showSpaceMesh;\n    float previewScale;\n\n    //reserved parameters,autoupdated by app:\n    float2 extent;//render area extent in pixels\n\tfloat2 mouse_pos;//current mouse position in pixels\n\tfloat2 mouse_delta;//mouse delta for the last frame in pixels\n\tfloat mouse_wheel_delta;//mouse wheel delta for the last frame\n\tbool lmb_down;//if left mouse button down\n\tbool rmb_down;//if right mouse button down\n\tbool mmb_down;//if middle mouse button down\n\tfloat t;//time counter\n\tfloat dt;//time passed from last frame\n};\n\n//define parameters variable p\nInputParameters(Parameters,p);\n\n\nfloat fractal(float2 sp,int accuracy,float2 c)\n{\n    int i=0;\n    float r_sqr=p.radius*p.radius;\n    while(((sp.x*sp.x+sp.y*sp.y)<r_sqr)&&i<=accuracy)\n    {\n        sp= float2(sp.x * sp.x - sp.y * sp.y, p.k * sp.x * sp.y)+c;\n        ++i;\n    }\n    if(i>=accuracy)\n    \treturn 1;\n    \n    \n    float val=i;\n    if(p.removeBanding)\n    \tval=clamp(val-log(log(length(sp)))/log(2)+1,0,accuracy);\n    return pow(val/(float)accuracy,p.contrast);\n}\n\n\nfloat2 uvToSpacePoint(float2 uv)\n{\n\tfloat2x2 rot=float2x2(cos(p.rotation),sin(p.rotation),-sin(p.rotation),cos(p.rotation));\n\treturn rot*(uv / p.zoom +p.move);\n}\n\nfloat2 spacePointToUv(float2 spacePoint)\n{\n\tfloat2x2 rot=float2x2(cos(p.rotation),sin(p.rotation),-sin(p.rotation),cos(p.rotation));\n\treturn  (transpose(rot)*spacePoint-p.move)*p.zoom;\n}\n\n//This function will be the result of export\n//Pass parameters through function arguments for dynamic parameters\nfloat4 output(float2 uv)\n{\n\tfloat2 pos = uvToSpacePoint(uv);\n\tfloat4 result=0;\n\tif(p.mode!=0)\n   \t\tresult+= fractal(pos,p.accuracy,p.c);\n    if(p.mode!=2)\n   \t \tresult+= fractal(pos,p.accuracy,pos);\n\n   \tif(p.mode%2==1)\n   \t\tresult/=2;\n\n\n   \treturn result*p.color;\n}\n\nfloat2 screenToUV(float2 screenPosition)\n{\n\tscreenPosition.y=-screenPosition.y;\n\tfloat2 identitySquare;\n\tif(p.extent.x>p.extent.y)\n\t\tidentitySquare=float2(p.extent.y/p.extent.x,1);\n    else\n        identitySquare=float2(1,p.extent.x/p.extent.y);\n\treturn (screenPosition+identitySquare*p.previewScale*0.5)/identitySquare/p.previewScale;\n}\n\n//this function is called for each pixel\n//and returns color for this pixel\n//you can use it to preview output function\n//this does not affect the export result\nfloat4 main(float2 position)\n{\n\tfloat2 positionT = screenToUV(position);\n\t\n\tfloat4 result = output(positionT);\n\t\n\tif(p.showUVRect)\n\t{\n\t    float w=0.005/p.previewScale;\n\t    float2 fr= frac(positionT);\n\t    if(step(-w,fr.y)-step(w,fr.y)+step(-w,fr.x)-step(w,fr.x))\n\t    \treturn 1-result;\n\t}\n\t\n\tif(p.showSpaceMesh)\n\t{\n\t    float w=0.005/p.previewScale;\n\t    float2 fr= frac(uvToSpacePoint(positionT));\n\t    if(step(-w,fr.y)-step(w,fr.y)+step(-w,fr.x)-step(w,fr.x))\n\t    \treturn float4(0.5,0.5,1,1);\n\t}\n\t\n   \treturn result;\n}\n\n\n//function called only once per frame before main\n//Allows to control parameters in one place\nvoid UpdateParameters(inout Parameters p)\n{\n\t//fractal parameters control\n\t//c point\n\tif(p.rmb_down)\n\t\tp.c=uvToSpacePoint(screenToUV(p.mouse_pos/p.extent*2-1));\n\t\t\n\t//switch mode\n\tif(isKeyPressed(KEY_F)||isKeyReleased(KEY_F))\n\t\tp.mode=(p.mode+1)%4;\n\t\t\n\tp.accuracy*=exp((isKeyDown(KEY_UpArrow)-isKeyDown(KEY_DownArrow))*p.dt);\n\tp.contrast*=exp((isKeyDown(KEY_RightArrow)-isKeyDown(KEY_LeftArrow))*p.dt*5);\n\n\t//scale with mouse wheel\n\tif(!isKeyDown(KEY_Shift)&&!isKeyDown(KEY_Alt))\n\t{\n\t    float2 mouseBeforeZoom=screenToUV(p.mouse_pos/p.extent*2-1);\n\t    float zoomScale=exp(p.mouse_wheel_delta*0.1);\n\t    float2 mouseAfterZoom=mouseBeforeZoom*zoomScale;\n\t    p.zoom*=zoomScale;\n\t    p.move-=(mouseBeforeZoom-mouseAfterZoom)/p.zoom;\n     }\n     else if(isKeyDown(KEY_Alt))//rotate with Alt\n     {    \t\n     \tfloat delta=p.mouse_wheel_delta*0.1;\n     \tp.rotation+=delta;\n     \tfloat2x2 rot=float2x2(cos(delta),sin(delta),-sin(delta),cos(delta));\n     \tp.move=p.move*rot;\n     }\n     \n\t//movement with mouse\n\tif(p.lmb_down)\n\t\tp.move-=float2(p.mouse_delta.x,-p.mouse_delta.y)/p.extent.y/p.zoom*2/p.previewScale;\n\n\n\t//scale and move with keyboard\n\tfloat scaleUpdate=exp((isKeyDown(KEY_E)-isKeyDown(KEY_Q) )*p.dt);\n\tp.zoom=p.zoom*scaleUpdate;\n\tp.move-=(0.5-0.5*scaleUpdate)/p.zoom;\n\n\tfloat2 move_delta=float2(isKeyDown(KEY_D)-isKeyDown(KEY_A),isKeyDown(KEY_W)-isKeyDown(KEY_S));\n\tp.move+=move_delta*p.dt/p.zoom;\n\n\n\t\n\t//preview parameters control\n\tif(isKeyPressed(KEY_1))\n\t\tp.showUVRect=!p.showUVRect;\n\tif(isKeyPressed(KEY_2))\n\t\tp.showSpaceMesh=!p.showSpaceMesh;\n\tif(isKeyDown(KEY_Shift))\n\t\tp.previewScale*=exp(p.mouse_wheel_delta*0.1);\n\t\n\n\t//limit parameters\n\tif(p.zoom<=0)\n\t\tp.zoom=0.1;\n\tif(p.radius<0)\n\t\tp.radius=0;\n\tif(isnan(p.move.x)||isnan(p.move.y))\n\t\tp.move=0;\n\tp.mode=clamp(p.mode,0,3);\n}\n"}],"name":"MandelbrotTemplate","parameters":{"members":{"accuracy":{"data":[60,32,-70,66],"metadata":null,"name":"accuracy","offset":16,"type":"float"},"c":{"data":[-119,97,39,-66,-13,48,86,-65],"metadata":null,"name":"c","offset":24,"type":"vec2"},"color":{"data":[74,7,56,63,0,0,-128,63,0,0,0,0,0,0,-128,63],"metadata":null,"name":"color","offset":48,"type":"vec4"},"contrast":{"data":[0,0,-128,63],"metadata":null,"name":"contrast","offset":32,"type":"float"},"dt":{"data":[-117,118,-53,59],"metadata":null,"name":"dt","offset":124,"type":"float"},"extent":{"data":[0,0,32,69,0,0,-76,68],"metadata":null,"name":"extent","offset":80,"type":"vec2"},"k":{"data":[0,0,0,64,0,0,0,0],"metadata":null,"name":"k","offset":40,"type":"float"},"lmb_down":{"data":[0,0,0,0],"metadata":null,"name":"lmb_down","offset":108,"type":"uint"},"mmb_down":{"data":[0,0,0,0],"metadata":null,"name":"mmb_down","offset":116,"type":"uint"},"mode":{"data":[0,0,0,0],"metadata":null,"name":"mode","offset":20,"type":"int"},"mouse_delta":{"data":[0,0,0,-64,0,0,-128,-64],"metadata":null,"name":"mouse_delta","offset":96,"type":"vec2"},"mouse_pos":{"data":[0,64,82,68,0,0,-128,66],"metadata":null,"name":"mouse_pos","offset":88,"type":"vec2"},"mouse_wheel_delta":{"data":[0,0,0,0],"metadata":null,"name":"mouse_wheel_delta","offset":104,"type":"float"},"move":{"data":[-103,37,-87,-65,-2,38,112,-65],"metadata":null,"name":"move","offset":0,"type":"vec2"},"previewScale":{"data":[11,72,-119,63],"metadata":null,"name":"previewScale","offset":76,"type":"float"},"radius":{"data":[0,0,32,65],"metadata":null,"name":"radius","offset":36,"type":"float"},"removeBanding":{"data":[1,0,0,0],"metadata":null,"name":"removeBanding","offset":64,"type":"uint"},"rmb_down":{"data":[0,0,0,0],"metadata":null,"name":"rmb_down","offset":112,"type":"uint"},"rotation":{"data":[0,0,0,0],"metadata":null,"name":"rotation","offset":12,"type":"float"},"showSpaceMesh":{"data":[0,0,0,0],"metadata":null,"name":"showSpaceMesh","offset":72,"type":"uint"},"showUVRect":{"data":[0,0,0,0],"metadata":null,"name":"showUVRect","offset":68,"type":"uint"},"t":{"data":[119,-59,-59,70],"metadata":null,"name":"t","offset":120,"type":"float"},"zoom":{"data":[6,65,24,63],"metadata":null,"name":"zoom","offset":8,"type":"float"}},"size":128}}